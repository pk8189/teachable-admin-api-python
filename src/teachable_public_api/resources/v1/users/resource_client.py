"""File Generated by Sideko (sideko.dev)"""

from teachable_public_api.core import (
    QueryParams,
    RequestOptions,
    to_encodable,
    encode_param,
    AsyncBaseClient,
    SyncBaseClient,
    default_request_options,
)
import typing
from teachable_public_api.types.v1.users import models, params


class UsersClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.CreateUserRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.UserResponse:
        """
        Create a new user
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerCreateUserRequest)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/v1/users",
            auth_names=["ApiKeyAuth"],
            json=_json,
            cast_to=models.UserResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def patch(
        self,
        *,
        data: params.UpdateUserRequest,
        user_id: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.UserResponse:
        """
        Update the name or src of a user.
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerUpdateUserRequest)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PATCH",
            path=f"/v1/users/{user_id}",
            auth_names=["ApiKeyAuth"],
            json=_json,
            cast_to=models.UserResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self, *, user_id: int, request_options: typing.Optional[RequestOptions] = None
    ) -> models.UserResponse:
        """
        List a specific user and their course enrollments by user ID.
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/users/{user_id}",
            auth_names=["ApiKeyAuth"],
            cast_to=models.UserResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        email_query: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListUsersResponse:
        """
        Get a list of users
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if email_query is not None:
            _query["email"] = encode_param(email_query, False)
        if page is not None:
            _query["page"] = encode_param(page, False)
        if per is not None:
            _query["per"] = encode_param(per, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/users",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListUsersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncUsersClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.CreateUserRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.UserResponse:
        """
        Create a new user
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerCreateUserRequest)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/v1/users",
            auth_names=["ApiKeyAuth"],
            json=_json,
            cast_to=models.UserResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def patch(
        self,
        *,
        data: params.UpdateUserRequest,
        user_id: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.UserResponse:
        """
        Update the name or src of a user.
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerUpdateUserRequest)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PATCH",
            path=f"/v1/users/{user_id}",
            auth_names=["ApiKeyAuth"],
            json=_json,
            cast_to=models.UserResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self, *, user_id: int, request_options: typing.Optional[RequestOptions] = None
    ) -> models.UserResponse:
        """
        List a specific user and their course enrollments by user ID.
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/users/{user_id}",
            auth_names=["ApiKeyAuth"],
            cast_to=models.UserResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        email_query: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListUsersResponse:
        """
        Get a list of users
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if email_query is not None:
            _query["email"] = encode_param(email_query, False)
        if page is not None:
            _query["page"] = encode_param(page, False)
        if per is not None:
            _query["per"] = encode_param(per, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/users",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListUsersResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
