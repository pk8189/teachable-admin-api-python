"""File Generated by Sideko (sideko.dev)"""

from teachable_public_api.core import (
    QueryParams,
    RequestOptions,
    AsyncBaseClient,
    SyncBaseClient,
    encode_param,
    default_request_options,
)
import typing
from teachable_public_api.types.v1.pricing_plans import models


class PricingPlansClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def get(
        self,
        *,
        pricing_plan_id: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PricingPlanResponse:
        """
        Fetch details of a specific pricing plan. Currently only supports pricing plans associated with courses.
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/pricing_plans/{pricing_plan_id}",
            auth_names=["ApiKeyAuth"],
            cast_to=models.PricingPlanResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        page: typing.Optional[int] = None,
        per: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListPricingPlansResponse:
        """
        Fetch all the pricing plans at your school
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if page is not None:
            _query["page"] = encode_param(page, False)
        if per is not None:
            _query["per"] = encode_param(per, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/pricing_plans",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListPricingPlansResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncPricingPlansClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def get(
        self,
        *,
        pricing_plan_id: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PricingPlanResponse:
        """
        Fetch details of a specific pricing plan. Currently only supports pricing plans associated with courses.
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/pricing_plans/{pricing_plan_id}",
            auth_names=["ApiKeyAuth"],
            cast_to=models.PricingPlanResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        page: typing.Optional[int] = None,
        per: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListPricingPlansResponse:
        """
        Fetch all the pricing plans at your school
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if page is not None:
            _query["page"] = encode_param(page, False)
        if per is not None:
            _query["per"] = encode_param(per, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/pricing_plans",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListPricingPlansResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
