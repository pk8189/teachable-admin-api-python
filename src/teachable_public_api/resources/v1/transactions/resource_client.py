"""File Generated by Sideko (sideko.dev)"""

from teachable_public_api.core import (
    AsyncBaseClient,
    SyncBaseClient,
    encode_param,
    default_request_options,
    RequestOptions,
    QueryParams,
)
import typing
from teachable_public_api.types.v1.transactions import models


class TransactionsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        affiliate_id: typing.Optional[int] = None,
        course_id: typing.Optional[int] = None,
        end: typing.Optional[str] = None,
        is_chargeback: typing.Optional[bool] = None,
        is_fully_refunded: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per: typing.Optional[int] = None,
        pricing_plan_id: typing.Optional[int] = None,
        start: typing.Optional[str] = None,
        user_id: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListTransactionsResponse:
        """
        Fetch a list of sales transactions made in your school. (New transactions can take up to two minutes to be returned via API call from the time of sale.)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if affiliate_id is not None:
            _query["affiliate_id"] = encode_param(affiliate_id, False)
        if course_id is not None:
            _query["course_id"] = encode_param(course_id, False)
        if end is not None:
            _query["end"] = encode_param(end, False)
        if is_chargeback is not None:
            _query["is_chargeback"] = encode_param(is_chargeback, False)
        if is_fully_refunded is not None:
            _query["is_fully_refunded"] = encode_param(is_fully_refunded, False)
        if page is not None:
            _query["page"] = encode_param(page, False)
        if per is not None:
            _query["per"] = encode_param(per, False)
        if pricing_plan_id is not None:
            _query["pricing_plan_id"] = encode_param(pricing_plan_id, False)
        if start is not None:
            _query["start"] = encode_param(start, False)
        if user_id is not None:
            _query["user_id"] = encode_param(user_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/transactions",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListTransactionsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncTransactionsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        affiliate_id: typing.Optional[int] = None,
        course_id: typing.Optional[int] = None,
        end: typing.Optional[str] = None,
        is_chargeback: typing.Optional[bool] = None,
        is_fully_refunded: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per: typing.Optional[int] = None,
        pricing_plan_id: typing.Optional[int] = None,
        start: typing.Optional[str] = None,
        user_id: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListTransactionsResponse:
        """
        Fetch a list of sales transactions made in your school. (New transactions can take up to two minutes to be returned via API call from the time of sale.)
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if affiliate_id is not None:
            _query["affiliate_id"] = encode_param(affiliate_id, False)
        if course_id is not None:
            _query["course_id"] = encode_param(course_id, False)
        if end is not None:
            _query["end"] = encode_param(end, False)
        if is_chargeback is not None:
            _query["is_chargeback"] = encode_param(is_chargeback, False)
        if is_fully_refunded is not None:
            _query["is_fully_refunded"] = encode_param(is_fully_refunded, False)
        if page is not None:
            _query["page"] = encode_param(page, False)
        if per is not None:
            _query["per"] = encode_param(per, False)
        if pricing_plan_id is not None:
            _query["pricing_plan_id"] = encode_param(pricing_plan_id, False)
        if start is not None:
            _query["start"] = encode_param(start, False)
        if user_id is not None:
            _query["user_id"] = encode_param(user_id, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/transactions",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListTransactionsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
