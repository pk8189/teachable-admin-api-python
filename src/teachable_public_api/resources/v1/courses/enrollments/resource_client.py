"""File Generated by Sideko (sideko.dev)"""

from teachable_public_api.core import (
    AsyncBaseClient,
    SyncBaseClient,
    RequestOptions,
    encode_param,
    QueryParams,
    default_request_options,
)
import typing
import typing_extensions
from teachable_public_api.types.v1.courses.enrollments import models


class EnrollmentsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        course_id: int,
        enrolled_in_after: typing.Optional[str] = None,
        enrolled_in_before: typing.Optional[str] = None,
        sort_direction: typing.Optional[
            typing_extensions.Literal["asc", "desc"]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListCourseEnrollmentsResponse:
        """
        Fetch active enrolled students and student progress for a specific course.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if enrolled_in_after is not None:
            _query["enrolled_in_after"] = encode_param(enrolled_in_after, False)
        if enrolled_in_before is not None:
            _query["enrolled_in_before"] = encode_param(enrolled_in_before, False)
        if sort_direction is not None:
            _query["sort_direction"] = encode_param(sort_direction, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/courses/{course_id}/enrollments",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListCourseEnrollmentsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncEnrollmentsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        course_id: int,
        enrolled_in_after: typing.Optional[str] = None,
        enrolled_in_before: typing.Optional[str] = None,
        sort_direction: typing.Optional[
            typing_extensions.Literal["asc", "desc"]
        ] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListCourseEnrollmentsResponse:
        """
        Fetch active enrolled students and student progress for a specific course.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if enrolled_in_after is not None:
            _query["enrolled_in_after"] = encode_param(enrolled_in_after, False)
        if enrolled_in_before is not None:
            _query["enrolled_in_before"] = encode_param(enrolled_in_before, False)
        if sort_direction is not None:
            _query["sort_direction"] = encode_param(sort_direction, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/courses/{course_id}/enrollments",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListCourseEnrollmentsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
