"""File Generated by Sideko (sideko.dev)"""

from teachable_public_api.core import (
    AsyncBaseClient,
    RequestOptions,
    default_request_options,
    SyncBaseClient,
    QueryParams,
    encode_param,
)
from teachable_public_api.resources.v1.courses.enrollments import (
    AsyncEnrollmentsClient,
    EnrollmentsClient,
)
from teachable_public_api.resources.v1.courses.lectures import (
    AsyncLecturesClient,
    LecturesClient,
)
from teachable_public_api.resources.v1.courses.progress import (
    AsyncProgressClient,
    ProgressClient,
)
import typing
from teachable_public_api.types.v1.courses import models


class CoursesClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.enrollments = EnrollmentsClient(base_client=self._base_client)
        self.lectures = LecturesClient(base_client=self._base_client)
        self.progress = ProgressClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def get(
        self, *, course_id: int, request_options: typing.Optional[RequestOptions] = None
    ) -> models.CourseResponse:
        """
        Fetch a specific course by ID.
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/courses/{course_id}",
            auth_names=["ApiKeyAuth"],
            cast_to=models.CourseResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        author_bio_id: typing.Optional[int] = None,
        created_at: typing.Optional[str] = None,
        is_published: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListCoursesResponse:
        """
        Fetch all courses at your school.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if author_bio_id is not None:
            _query["author_bio_id"] = encode_param(author_bio_id, False)
        if created_at is not None:
            _query["created_at"] = encode_param(created_at, False)
        if is_published is not None:
            _query["is_published"] = encode_param(is_published, False)
        if name is not None:
            _query["name"] = encode_param(name, False)
        if page is not None:
            _query["page"] = encode_param(page, False)
        if per is not None:
            _query["per"] = encode_param(per, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/v1/courses",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListCoursesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncCoursesClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.enrollments = AsyncEnrollmentsClient(base_client=self._base_client)
        self.lectures = AsyncLecturesClient(base_client=self._base_client)
        self.progress = AsyncProgressClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def get(
        self, *, course_id: int, request_options: typing.Optional[RequestOptions] = None
    ) -> models.CourseResponse:
        """
        Fetch a specific course by ID.
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/courses/{course_id}",
            auth_names=["ApiKeyAuth"],
            cast_to=models.CourseResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        author_bio_id: typing.Optional[int] = None,
        created_at: typing.Optional[str] = None,
        is_published: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListCoursesResponse:
        """
        Fetch all courses at your school.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if author_bio_id is not None:
            _query["author_bio_id"] = encode_param(author_bio_id, False)
        if created_at is not None:
            _query["created_at"] = encode_param(created_at, False)
        if is_published is not None:
            _query["is_published"] = encode_param(is_published, False)
        if name is not None:
            _query["name"] = encode_param(name, False)
        if page is not None:
            _query["page"] = encode_param(page, False)
        if per is not None:
            _query["per"] = encode_param(per, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/v1/courses",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListCoursesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
