"""File Generated by Sideko (sideko.dev)"""

from teachable_public_api.core import (
    SyncBaseClient,
    encode_param,
    RequestOptions,
    AsyncBaseClient,
    QueryParams,
    default_request_options,
)
import typing
from teachable_public_api.types.v1.webhooks.events import models


class EventsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def list(
        self,
        *,
        webhook_id: int,
        created_after: typing.Optional[str] = None,
        created_before: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per: typing.Optional[int] = None,
        response_http_status_gte: typing.Optional[int] = None,
        response_http_status_lte: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListWebhookEventsResponse:
        """
        Fetch all the events for a webhook.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if created_after is not None:
            _query["created_after"] = encode_param(created_after, False)
        if created_before is not None:
            _query["created_before"] = encode_param(created_before, False)
        if page is not None:
            _query["page"] = encode_param(page, False)
        if per is not None:
            _query["per"] = encode_param(per, False)
        if response_http_status_gte is not None:
            _query["response_http_status_gte"] = encode_param(
                response_http_status_gte, False
            )
        if response_http_status_lte is not None:
            _query["response_http_status_lte"] = encode_param(
                response_http_status_lte, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/v1/webhooks/{webhook_id}/events",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListWebhookEventsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncEventsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def list(
        self,
        *,
        webhook_id: int,
        created_after: typing.Optional[str] = None,
        created_before: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        per: typing.Optional[int] = None,
        response_http_status_gte: typing.Optional[int] = None,
        response_http_status_lte: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.ListWebhookEventsResponse:
        """
        Fetch all the events for a webhook.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if created_after is not None:
            _query["created_after"] = encode_param(created_after, False)
        if created_before is not None:
            _query["created_before"] = encode_param(created_before, False)
        if page is not None:
            _query["page"] = encode_param(page, False)
        if per is not None:
            _query["per"] = encode_param(per, False)
        if response_http_status_gte is not None:
            _query["response_http_status_gte"] = encode_param(
                response_http_status_gte, False
            )
        if response_http_status_lte is not None:
            _query["response_http_status_lte"] = encode_param(
                response_http_status_lte, False
            )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/v1/webhooks/{webhook_id}/events",
            auth_names=["ApiKeyAuth"],
            query_params=_query,
            cast_to=models.ListWebhookEventsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
