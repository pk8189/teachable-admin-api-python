"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class PaginationMeta(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    from_field: int = pydantic.Field(alias="from")
    number_of_pages: int = pydantic.Field(alias="number_of_pages")
    page: int = pydantic.Field(alias="page")
    per_page: int = pydantic.Field(alias="per_page")
    to: int = pydantic.Field(alias="to")
    total: int = pydantic.Field(alias="total")


class PricingPlanSummary(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    course_id: int = pydantic.Field(alias="course_id")
    created_at: str = pydantic.Field(alias="created_at")
    currency: str = pydantic.Field(alias="currency")
    id: int = pydantic.Field(alias="id")
    name: str = pydantic.Field(alias="name")
    price: int = pydantic.Field(alias="price")
    updated_at: str = pydantic.Field(alias="updated_at")


class Frequency(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    access_limit_date: typing.Optional[str] = pydantic.Field(
        alias="access_limit_date", default=None
    )
    access_limit_duration: typing.Optional[int] = pydantic.Field(
        alias="access_limit_duration", default=None
    )
    access_limit_interval: typing.Optional[str] = pydantic.Field(
        alias="access_limit_interval", default=None
    )
    billing_interval: typing.Optional[str] = pydantic.Field(
        alias="billing_interval", default=None
    )
    billing_interval_count: typing.Optional[int] = pydantic.Field(
        alias="billing_interval_count", default=None
    )
    type: str = pydantic.Field(alias="type")


class ListPricingPlansResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    meta: PaginationMeta = pydantic.Field(alias="meta")
    pricing_plans: typing.List[PricingPlanSummary] = pydantic.Field(
        alias="pricing_plans"
    )


class PricingPlanDetails(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    course_id: int = pydantic.Field(alias="course_id")
    created_at: str = pydantic.Field(alias="created_at")
    currency: str = pydantic.Field(alias="currency")
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    enrollment_cap: typing.Optional[int] = pydantic.Field(
        alias="enrollment_cap", default=None
    )
    free_trial_length: typing.Optional[int] = pydantic.Field(
        alias="free_trial_length", default=None
    )
    frequency: Frequency = pydantic.Field(alias="frequency")
    id: int = pydantic.Field(alias="id")
    name: str = pydantic.Field(alias="name")
    price: int = pydantic.Field(alias="price")
    updated_at: str = pydantic.Field(alias="updated_at")


class PricingPlanResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    pricing_plan: PricingPlanDetails = pydantic.Field(alias="pricing_plan")
