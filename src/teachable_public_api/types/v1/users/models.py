"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class PaginationMeta(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    from_field: int = pydantic.Field(alias="from")
    number_of_pages: int = pydantic.Field(alias="number_of_pages")
    page: int = pydantic.Field(alias="page")
    per_page: int = pydantic.Field(alias="per_page")
    to: int = pydantic.Field(alias="to")
    total: int = pydantic.Field(alias="total")


class IndexUserResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    email_field: str = pydantic.Field(alias="email")
    id: int = pydantic.Field(alias="id")
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)


class UserCourse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    completed_at: typing.Optional[str] = pydantic.Field(
        alias="completed_at", default=None
    )
    course_id: int = pydantic.Field(alias="course_id")
    course_name: str = pydantic.Field(alias="course_name")
    enrolled_at: str = pydantic.Field(alias="enrolled_at")
    is_active_enrollment: bool = pydantic.Field(alias="is_active_enrollment")
    percent_complete: float = pydantic.Field(alias="percent_complete")


class UserTag(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    name: str = pydantic.Field(alias="name")


class ListUsersResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    meta: PaginationMeta = pydantic.Field(alias="meta")
    users: typing.List[IndexUserResponse] = pydantic.Field(alias="users")


class UserResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    courses: typing.List[UserCourse] = pydantic.Field(alias="courses")
    email_field: str = pydantic.Field(alias="email")
    id: int = pydantic.Field(alias="id")
    last_sign_in_ip: typing.Optional[str] = pydantic.Field(
        alias="last_sign_in_ip", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    role: str = pydantic.Field(alias="role")
    tags: typing.List[UserTag] = pydantic.Field(alias="tags")
