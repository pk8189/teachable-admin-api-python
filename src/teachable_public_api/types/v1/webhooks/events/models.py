"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class WebhookEventSummary(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attempt_count: int = pydantic.Field(alias="attempt_count")
    created_at: str = pydantic.Field(alias="created_at")
    id: int = pydantic.Field(alias="id")
    last_attempted_at: typing.Optional[str] = pydantic.Field(
        alias="last_attempted_at", default=None
    )
    object_id: int = pydantic.Field(alias="object_id")
    object_type: str = pydantic.Field(alias="object_type")
    response_http_status: typing.Optional[int] = pydantic.Field(
        alias="response_http_status", default=None
    )
    webhook_id: int = pydantic.Field(alias="webhook_id")
    workflow_state: str = pydantic.Field(alias="workflow_state")


class PaginationMeta(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    from_field: int = pydantic.Field(alias="from")
    number_of_pages: int = pydantic.Field(alias="number_of_pages")
    page: int = pydantic.Field(alias="page")
    per_page: int = pydantic.Field(alias="per_page")
    to: int = pydantic.Field(alias="to")
    total: int = pydantic.Field(alias="total")


class ListWebhookEventsResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    events: typing.List[WebhookEventSummary] = pydantic.Field(alias="events")
    meta: PaginationMeta = pydantic.Field(alias="meta")
