"""File Generated by Sideko (sideko.dev)"""

import io
import typing

import typing_extensions
import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class QuizzesResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    quiz_ids: typing.List[int] = pydantic.Field(alias="quiz_ids")


class QuizQuestion(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    answers: typing.List[str] = pydantic.Field(alias="answers")
    correct_answers: typing.List[str] = pydantic.Field(alias="correct_answers")
    graded: bool = pydantic.Field(alias="graded")
    question: str = pydantic.Field(alias="question")
    question_type: str = pydantic.Field(alias="question_type")


class QuizInformation(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: int = pydantic.Field(alias="id")
    questions: typing.List[QuizQuestion] = pydantic.Field(alias="questions")
    type: typing_extensions.Literal["Quiz"] = pydantic.Field(alias="type")


class QuizInformationResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: int = pydantic.Field(alias="id")
    kind: typing_extensions.Literal["quiz"] = pydantic.Field(alias="kind")
    name: str = pydantic.Field(alias="name")
    position: int = pydantic.Field(alias="position")
    quiz: QuizInformation = pydantic.Field(alias="quiz")
    text: typing.Optional[str] = pydantic.Field(alias="text", default=None)
    url: typing.Optional[str] = pydantic.Field(alias="url", default=None)
