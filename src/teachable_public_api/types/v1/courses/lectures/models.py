"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class QuizQuestion(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    answers: typing.List[str] = pydantic.Field(alias="answers")
    correct_answers: typing.List[str] = pydantic.Field(alias="correct_answers")
    graded: bool = pydantic.Field(alias="graded")
    question: str = pydantic.Field(alias="question")
    question_type: str = pydantic.Field(alias="question_type")


class Quiz(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: int = pydantic.Field(alias="id")
    questions: typing.List[QuizQuestion] = pydantic.Field(alias="questions")


class Attachment(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    file_extension: typing.Optional[str] = pydantic.Field(
        alias="file_extension", default=None
    )
    file_size: typing.Optional[int] = pydantic.Field(alias="file_size", default=None)
    id: int = pydantic.Field(alias="id")
    kind: str = pydantic.Field(alias="kind")
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    position: typing.Optional[int] = pydantic.Field(alias="position", default=None)
    quiz: typing.Optional[Quiz] = pydantic.Field(alias="quiz", default=None)
    text: typing.Optional[str] = pydantic.Field(alias="text", default=None)
    url: typing.Optional[str] = pydantic.Field(alias="url", default=None)


class Lecture(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    attachments: typing.List[Attachment] = pydantic.Field(alias="attachments")
    id: int = pydantic.Field(alias="id")
    is_published: bool = pydantic.Field(alias="is_published")
    lecture_section_id: int = pydantic.Field(alias="lecture_section_id")
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    position: int = pydantic.Field(alias="position")


class LectureResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    lecture: Lecture = pydantic.Field(alias="lecture")
