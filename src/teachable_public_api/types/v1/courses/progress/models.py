"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class Certificate(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    issued_at: typing.Optional[int] = pydantic.Field(alias="issued_at", default=None)
    page_id: typing.Optional[int] = pydantic.Field(alias="page_id", default=None)
    serial_number: typing.Optional[int] = pydantic.Field(
        alias="serial_number", default=None
    )


class LectureProgress(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    completed_at: typing.Optional[str] = pydantic.Field(
        alias="completed_at", default=None
    )
    id: int = pydantic.Field(alias="id")
    is_completed: bool = pydantic.Field(alias="is_completed")
    name: str = pydantic.Field(alias="name")


class PaginationMeta(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    from_field: int = pydantic.Field(alias="from")
    number_of_pages: int = pydantic.Field(alias="number_of_pages")
    page: int = pydantic.Field(alias="page")
    per_page: int = pydantic.Field(alias="per_page")
    to: int = pydantic.Field(alias="to")
    total: int = pydantic.Field(alias="total")


class LectureProgresses(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    lecture_progress: LectureProgress = pydantic.Field(alias="lecture_progress")


class LectureSectionProgress(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: int = pydantic.Field(alias="id")
    lectures: typing.List[LectureProgresses] = pydantic.Field(alias="lectures")
    name: str = pydantic.Field(alias="name")


class LectureSectionProgresses(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    lecture_section_progress: typing.Optional[LectureSectionProgress] = pydantic.Field(
        alias="lecture_section_progress", default=None
    )


class CourseProgressResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    certificate: typing.Optional[Certificate] = pydantic.Field(
        alias="certificate", default=None
    )
    completed_at: typing.Optional[str] = pydantic.Field(
        alias="completed_at", default=None
    )
    enrolled_at: str = pydantic.Field(alias="enrolled_at")
    id: int = pydantic.Field(alias="id")
    lecture_sections: typing.List[LectureSectionProgresses] = pydantic.Field(
        alias="lecture_sections"
    )
    percent_complete: int = pydantic.Field(alias="percent_complete")


class CourseProgressesResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    course_progress: CourseProgressResponse = pydantic.Field(alias="course_progress")
    meta: PaginationMeta = pydantic.Field(alias="meta")
