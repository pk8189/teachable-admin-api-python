"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class CourseSummary(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    heading: typing.Optional[str] = pydantic.Field(alias="heading", default=None)
    id: int = pydantic.Field(alias="id")
    image_url: typing.Optional[str] = pydantic.Field(alias="image_url", default=None)
    is_published: bool = pydantic.Field(alias="is_published")
    name: str = pydantic.Field(alias="name")


class PaginationMeta(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    from_field: int = pydantic.Field(alias="from")
    number_of_pages: int = pydantic.Field(alias="number_of_pages")
    page: int = pydantic.Field(alias="page")
    per_page: int = pydantic.Field(alias="per_page")
    to: int = pydantic.Field(alias="to")
    total: int = pydantic.Field(alias="total")


class CourseDetailAuthorBio(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    bio: typing.Optional[str] = pydantic.Field(alias="bio", default=None)
    name: str = pydantic.Field(alias="name")
    profile_image_url: typing.Optional[str] = pydantic.Field(
        alias="profile_image_url", default=None
    )
    user_id: typing.Optional[int] = pydantic.Field(alias="user_id", default=None)


class LectureSummary(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: int = pydantic.Field(alias="id")
    is_published: bool = pydantic.Field(alias="is_published")
    position: int = pydantic.Field(alias="position")


class ListCoursesResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    courses: typing.List[CourseSummary] = pydantic.Field(alias="courses")
    meta: PaginationMeta = pydantic.Field(alias="meta")


class LectureSection(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: int = pydantic.Field(alias="id")
    is_published: bool = pydantic.Field(alias="is_published")
    lectures: typing.List[LectureSummary] = pydantic.Field(alias="lectures")
    name: str = pydantic.Field(alias="name")
    position: int = pydantic.Field(alias="position")


class CourseDetail(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    author_bio: CourseDetailAuthorBio = pydantic.Field(alias="author_bio")
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    heading: typing.Optional[str] = pydantic.Field(alias="heading", default=None)
    id: int = pydantic.Field(alias="id")
    image_url: typing.Optional[str] = pydantic.Field(alias="image_url", default=None)
    is_published: bool = pydantic.Field(alias="is_published")
    lecture_sections: typing.List[LectureSection] = pydantic.Field(
        alias="lecture_sections"
    )
    name: str = pydantic.Field(alias="name")


class CourseResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    course: CourseDetail = pydantic.Field(alias="course")
